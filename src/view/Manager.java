/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import dao.BrandDAO;
import dao.MotocycleDAO;
import dto.BrandDTO;
import dto.MotocycleDTO;

/**
 *
 * @author hieu1
 */
public class Manager extends javax.swing.JFrame {

    Vector<String> headerBrand = new Vector<>();
    Vector<String> headerMoto = new Vector<>();
    Vector dataBrand = new Vector();
    Vector dataMoto = new Vector();
    DefaultTableModel defaultModelBrand;
    DefaultTableModel defaultModelMoto;
    final int SUCCESS = 1;
    boolean addNewBrand = true;
    boolean addNewMoto = true;

    public Manager() throws Exception {
        initComponents();
        this.setTitle("Manager");

        headerBrand.add("BrandID");
        headerBrand.add("Name");
        headerBrand.add("Country");
        headerBrand.add("Description");

        headerMoto.add("MotoID");
        headerMoto.add("Model");
        headerMoto.add("Year");
        headerMoto.add("Condition");
        headerMoto.add("Price");
        headerMoto.add("Quantity");
        headerMoto.add("Warranty");
        headerMoto.add("BrandName");

        defaultModelBrand = (DefaultTableModel) tblBrand.getModel();
        defaultModelBrand.setDataVector(dataBrand, headerBrand);

        defaultModelMoto = (DefaultTableModel) tblMoto.getModel();
        defaultModelMoto.setDataVector(dataMoto, headerMoto);

        loadDataBrand();
        loadDataMoto();

        ArrayList<String> list = BrandDAO.ChoiceBrand(BrandDAO.getAllBrand());
        for (String string : list) {
            boxMoto.addItem(string);
        }
    }

    void loadDataBrand() {
        try {
            for (BrandDTO brand : BrandDAO.getAllBrand()) {
                Vector row = new Vector();
                row.add(brand.getBrandID());
                row.add(brand.getBrandName());
                row.add(brand.getCountry());
                row.add(brand.getDescription());
                dataBrand.add(row);
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    void loadDataMoto() {

        try {
            for (MotocycleDTO moto : MotocycleDAO.getAllMoto()) {
                if (moto.getQuantity() >= 1) {
                    Vector row = new Vector();
                    row.add(moto.getMotocycleID());
                    row.add(moto.getModel());
                    row.add(moto.getYear());
                    row.add(moto.getCondition());
                    row.add(moto.getPrice());
                    row.add(moto.getQuantity());
                    row.add(moto.getWarranty());
                    row.add(BrandDAO.getBrandNameByID(moto.getBrandID()));
                    dataMoto.add(row);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBrand = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBrand = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtBrandID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBrandName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCountry = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        btnAddBrand = new javax.swing.JButton();
        btnSaveBrand = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnResetBrand = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMoto = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtBikeID = new javax.swing.JTextField();
        txtModel = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        txtCondition = new javax.swing.JTextField();
        boxMoto = new javax.swing.JComboBox<>();
        txtPrice = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtWarranty = new javax.swing.JTextField();
        btnAddBike = new javax.swing.JButton();
        btnSaveBike = new javax.swing.JButton();
        btnDeleteBike = new javax.swing.JButton();
        btnResetMoto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tblBrand.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblBrand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBrandMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBrand);

        jLabel1.setText("BrandID:");

        txtBrandID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandIDActionPerformed(evt);
            }
        });

        jLabel2.setText("BrandName:");

        jLabel3.setText("Country");

        jLabel4.setText("Description");

        btnAddBrand.setText("Add");
        btnAddBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBrandActionPerformed(evt);
            }
        });

        btnSaveBrand.setText("Save");
        btnSaveBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveBrandActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnResetBrand.setText("Reset");
        btnResetBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetBrandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtBrandName, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(txtCountry, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDescription, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBrandID))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(btnSaveBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(btnResetBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBrandID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(56, 56, 56)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelBrand.addTab("Brand", jPanel1);

        tblMoto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMotoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMoto);

        jLabel5.setText("MotoCycleID");

        jLabel6.setText("Model");

        jLabel7.setText("Year");

        jLabel8.setText("Condition");

        jLabel9.setText("Price");

        jLabel10.setText("Quantity");

        jLabel11.setText("Warranty");

        jLabel12.setText("Brand Name");

        btnAddBike.setText("Add");
        btnAddBike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBikeActionPerformed(evt);
            }
        });

        btnSaveBike.setText("Save");
        btnSaveBike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveBikeActionPerformed(evt);
            }
        });

        btnDeleteBike.setText("Delete");
        btnDeleteBike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBikeActionPerformed(evt);
            }
        });

        btnResetMoto.setText("Reset");
        btnResetMoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetMotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(jLabel12)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(63, 63, 63)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtBikeID)
                    .addComponent(txtModel)
                    .addComponent(txtYear)
                    .addComponent(txtCondition)
                    .addComponent(boxMoto, 0, 212, Short.MAX_VALUE)
                    .addComponent(txtPrice)
                    .addComponent(txtQuantity)
                    .addComponent(txtWarranty))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddBike, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSaveBike, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteBike, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnResetMoto, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtBikeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(boxMoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveBike, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddBike, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteBike, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetMoto, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanelBrand.addTab("Motocycle", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBrand)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBrand)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBrandIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandIDActionPerformed

    private boolean checkValidBike() {
        String ID = txtBikeID.getText().trim();
        String model = txtModel.getText().trim();
        String year = txtYear.getText().trim();
        String condition = txtCondition.getText().trim();
        String price = txtPrice.getText().trim();
        String quantity = txtQuantity.getText().trim();
        String warranty = txtWarranty.getText().trim();
        if (ID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtBikeID.requestFocus();
            return false;
        } else if (!ID.matches("(B)[0-9]{3}")) {
            JOptionPane.showMessageDialog(this, "Invalid ID(Bxxx)");
            txtBikeID.requestFocus();
            return false;
        } else if (model.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtModel.requestFocus();
            return false;
        } else if (!model.matches("[a-zA-Z0-9 ]{3,40}")) {
            JOptionPane.showMessageDialog(this, "Invalid Model");
            txtModel.requestFocus();
            return false;
        } else if (year.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtYear.requestFocus();
            return false;
//        } else if (!year.matches("^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$")) {
//            JOptionPane.showMessageDialog(this, "Invalid Date Time(MMMM-MM-MM )");
//            txtYear.requestFocus();
//            return false;
        } else if (condition.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtCondition.requestFocus();
            return false;
        } else if (!condition.matches("[a-zA-Z ]{3,40}")) {
            JOptionPane.showMessageDialog(this, "Invalid Conditon");
            txtCondition.requestFocus();
            return false;
        } else if (price.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtPrice.requestFocus();
            return false;
        } else if (!price.matches("\\d*(\\.)?\\d*")) {
            JOptionPane.showMessageDialog(this, "Invalid Price");
            txtPrice.requestFocus();
            return false;
        } else if (quantity.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtQuantity.requestFocus();
            return false;
        } else if (!quantity.matches("[0-9 ]{1,5}")) {
            JOptionPane.showMessageDialog(this, "Invalid Quantity");
            txtQuantity.requestFocus();
            return false;
        } else if (warranty.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtWarranty.requestFocus();
            return false;
        } else if (!warranty.matches("[a-zA-Z ]{3,40}")) {
            JOptionPane.showMessageDialog(this, "Invalid Warranty");
            txtWarranty.requestFocus();
            return false;
        }
        return true;

    }
    private void btnAddBikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBikeActionPerformed
        if (!checkValidBike()) {
            return;
        }
        String ID = txtBikeID.getText().trim();
        String model = txtModel.getText().trim();
        String year = txtYear.getText().trim();
        String condition = txtCondition.getText().trim();
        String stringPrice = txtPrice.getText().trim();
        float price = Float.parseFloat(stringPrice);
        String strQuantity = txtQuantity.getText().trim();
        int quantity = Integer.parseInt(strQuantity);
        String warranty = txtWarranty.getText().trim();
        String brandName = (String) boxMoto.getSelectedItem();

        try {
            String brandID = BrandDAO.getIDByName(brandName);
            MotocycleDTO moto = new MotocycleDTO(ID, model, year, condition, price, quantity, warranty, brandID);
            if (MotocycleDAO.getMotoByID(ID) != null) {
                JOptionPane.showMessageDialog(this, "BikeID duplicate");
                return;
            }
            if (MotocycleDAO.addMoto(moto) == SUCCESS) {
                Vector row = new Vector();
                row.add(ID);
                row.add(model);
                row.add(year);
                row.add(condition);
                row.add(price);
                row.add(quantity);
                row.add(warranty);
                row.add(brandName);
                dataMoto.add(row);

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        tblMoto.updateUI();


    }//GEN-LAST:event_btnAddBikeActionPerformed

    private void btnResetBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetBrandActionPerformed
        addNewBrand = true;
        txtBrandID.setText("");
        txtBrandID.requestFocus();
        txtBrandName.setText("");
        txtCountry.setText("");
        txtDescription.setText("");
        txtBrandID.setEditable(true);
    }//GEN-LAST:event_btnResetBrandActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void tblBrandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBrandMouseClicked
        try {
            int selectedRow = tblBrand.getSelectedRow();
            String brandID = tblBrand.getValueAt(selectedRow, 0).toString();
            String brandName = tblBrand.getValueAt(selectedRow, 1).toString();
            String country = tblBrand.getValueAt(selectedRow, 2).toString();
            String description = tblBrand.getValueAt(selectedRow, 3).toString();
//            BrandDTO brandDTO = BrandDAO.getBrandByID(brandID);
            txtBrandID.setEditable(false);
            txtBrandID.setText(brandID);
            txtBrandName.setText(brandName);
            txtCountry.setText(country);
            txtDescription.setText(description);
        } catch (Exception e) {
            e.printStackTrace();
        }
        addNewBrand = false;
    }//GEN-LAST:event_tblBrandMouseClicked
    private boolean checkValidBrand() {
        String brandID = txtBrandID.getText().trim();
        String brandName = txtBrandName.getText().trim();
        String country = txtCountry.getText().trim();
        String description = txtDescription.getText().trim();
        if (brandID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtBrandID.requestFocus();
            return false;
        } else if (!brandID.matches("(A)[0-9]{3}")) {
            JOptionPane.showMessageDialog(this, "Invalid ID(Axxx)");
            txtBrandID.requestFocus();
            return false;

        } else if (brandName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtBrandName.requestFocus();
            return false;
        } else if (!brandName.matches("[a-zA-Z ]{3,50}")) {
            JOptionPane.showMessageDialog(this, "Invalid BrandName");
            txtBrandName.requestFocus();
            return false;

        } else if (country.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtCountry.requestFocus();
            return false;
        } else if (!country.matches("[a-zA-Z ]{3,50}")) {
            JOptionPane.showMessageDialog(this, "Invalid Country");
            txtCountry.requestFocus();
            return false;

        }
        if (description.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Not Empty");
            txtDescription.requestFocus();
            return false;
        } else if (!brandID.matches("[a-zA-Z0-9 ]{3,50}")) {
            JOptionPane.showMessageDialog(this, "Invalid Description");
            txtDescription.requestFocus();
            return false;

        }
        return true;

    }

    private void updateBoxMoto() throws Exception {
        boxMoto.removeAllItems();
        ArrayList<String> list = BrandDAO.ChoiceBrand(BrandDAO.getAllBrand());
        for (String string : list) {
            boxMoto.addItem(string);
        }
    }
    private void btnAddBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBrandActionPerformed
        if (!checkValidBrand()) {
            return;
        }
        String brandID = txtBrandID.getText().trim();
        String brandName = txtBrandName.getText().trim();
        String country = txtCountry.getText().trim();
        String description = txtDescription.getText().trim();
        BrandDTO brand = new BrandDTO(brandID, brandName, country, description);
        try {
            if ((BrandDAO.getBrandByID(brandID)) != null && (BrandDAO.getBrandByName(brandName)) != null) {
                JOptionPane.showMessageDialog(this, "This BrandID or BrandName exisited");
                return;

            }
            if (BrandDAO.addBrand(brand) == SUCCESS) {
                Vector row = new Vector();
                row.add(brandID);
                row.add(brandName);
                row.add(country);
                row.add(description);
                dataBrand.add(row);
                updateBoxMoto();

            }
        } catch (Exception e) {
        }
        tblBrand.updateUI();
    }//GEN-LAST:event_btnAddBrandActionPerformed

    private void btnSaveBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveBrandActionPerformed
        String brandID = txtBrandID.getText().trim();
        String brandName = txtBrandName.getText().trim();
        String country = txtCountry.getText().trim();
        String description = txtDescription.getText().trim();
        BrandDTO brand = new BrandDTO(brandID, brandName, country, description);
        if (!checkValidBrand()) {
            return;

        }
        try {
            if (BrandDAO.updateBrand(brand) == SUCCESS) {
                int selected = tblBrand.getSelectedRow();
                Vector row = (Vector) dataBrand.get(selected);

                row.set(1, brandName);
                row.set(2, country);
                row.set(3, description);
                updateBoxMoto();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        tblBrand.updateUI();
    }//GEN-LAST:event_btnSaveBrandActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblBrand.getSelectedRow();
        String brandID = txtBrandID.getText().trim();
        if (addNewBrand) {
            JOptionPane.showMessageDialog(this, "Please choose the row !");
            return;
        } else {
            try {
                int select = JOptionPane.showConfirmDialog(this, "Do you want to remove?", "Remove?", JOptionPane.YES_NO_OPTION);
                if (BrandDAO.checkRelate(brandID) != null) {
                    JOptionPane.showMessageDialog(this, "This Brand has relate with other Bike! Don't remove");
                    return;
                }
                if (select == JOptionPane.YES_OPTION) {

                    if (BrandDAO.deleteBrand(brandID) == SUCCESS) {
                        dataBrand.remove(selectedRow);
                        tblBrand.updateUI();
                        btnResetBrandActionPerformed(evt);
                        updateBoxMoto();
                    }

                }
            } catch (Exception e) {
            }
            tblBrand.updateUI();

        }


    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveBikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveBikeActionPerformed
        if (!checkValidBike()) {
            return;
        }
        String ID = txtBikeID.getText().trim();
        String model = txtModel.getText().trim();
        String year = txtYear.getText().trim();
        String condition = txtCondition.getText().trim();
        String stringPrice = txtPrice.getText().trim();
        float price = Float.parseFloat(stringPrice);
        String strQuantity = txtQuantity.getText().trim();
        int quantity = Integer.parseInt(strQuantity);
        String warranty = txtWarranty.getText().trim();
        String brandName = (String) boxMoto.getSelectedItem();
        try {
            String brandID = BrandDAO.getIDByName(brandName);
            MotocycleDTO moto = new MotocycleDTO(ID, model, year, condition, price, quantity, warranty, brandID);
            if (MotocycleDAO.updateMoto(moto) == SUCCESS) {
                int selectedRow = tblMoto.getSelectedRow();
                Vector row = (Vector) dataMoto.get(selectedRow);
                row.set(1, model);
                row.set(2, year);
                row.set(3, condition);
                row.set(4, price);
                row.set(5, quantity);
                row.set(6, warranty);
                row.set(7, BrandDAO.getBrandNameByID(brandID));
                loadDataBrand();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        tblMoto.updateUI();
    }//GEN-LAST:event_btnSaveBikeActionPerformed

    private void btnDeleteBikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBikeActionPerformed
        int selectedRow = tblMoto.getSelectedRow();
        String code = txtBikeID.getText().trim();
        if (addNewMoto) {
            JOptionPane.showMessageDialog(this, "Choose the row!");
        } else {
            int select = JOptionPane.showConfirmDialog(this, "Do you want to remove?", "Remove?", JOptionPane.YES_NO_OPTION);
            if (select == JOptionPane.YES_OPTION) {
                try {
                    if (MotocycleDAO.deleteBike(code) == SUCCESS) {
                        dataMoto.remove(selectedRow);
                        tblMoto.updateUI();
                        btnResetMotoActionPerformed(evt);
                       
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnDeleteBikeActionPerformed

    private void tblMotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMotoMouseClicked
        addNewMoto = false;
        txtBikeID.setEditable(false);
        int selecteRow = tblMoto.getSelectedRow();
        String bikeID = tblMoto.getValueAt(selecteRow, 0).toString();
        String model = tblMoto.getValueAt(selecteRow, 1).toString();
        String year = tblMoto.getValueAt(selecteRow, 2).toString();
        String condition = tblMoto.getValueAt(selecteRow, 3).toString();
        String price = tblMoto.getValueAt(selecteRow, 4).toString();
        String quantity = tblMoto.getValueAt(selecteRow, 5).toString();
        String warranty = tblMoto.getValueAt(selecteRow, 6).toString();
        String brandName = tblMoto.getValueAt(selecteRow, 7).toString();
        txtBikeID.setText(bikeID);
        txtModel.setText(model);
        txtYear.setText(year);
        txtCondition.setText(condition);
        txtPrice.setText(price);
        txtQuantity.setText(quantity);
        txtWarranty.setText(warranty);
        ArrayList<String> list;
        try {
            list = BrandDAO.ChoiceBrand(BrandDAO.getAllBrand());
            for (String string : list) {
                if (brandName.equals(string)) {
                    boxMoto.setSelectedItem(string);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_tblMotoMouseClicked

    private void btnResetMotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetMotoActionPerformed
        addNewMoto = true;
        txtBikeID.requestFocus();
        txtBikeID.setText("");
        txtModel.setText("");
        txtYear.setText("");
        txtCondition.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
        txtWarranty.setText("");
        boxMoto.setSelectedIndex(0);
        txtBikeID.setEditable(true);
    }//GEN-LAST:event_btnResetMotoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manager.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manager.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manager.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manager.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Login lg = new Login();
                if(lg.getAccept()==1){
                    try {
                    new Manager().setVisible(true);

                } catch (Exception ex) {
                    Logger.getLogger(Manager.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                }else{
                    lg.setVisible(true);
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxMoto;
    private javax.swing.JButton btnAddBike;
    private javax.swing.JButton btnAddBrand;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteBike;
    private javax.swing.JButton btnResetBrand;
    private javax.swing.JButton btnResetMoto;
    private javax.swing.JButton btnSaveBike;
    private javax.swing.JButton btnSaveBrand;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jPanelBrand;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblBrand;
    private javax.swing.JTable tblMoto;
    private javax.swing.JTextField txtBikeID;
    private javax.swing.JTextField txtBrandID;
    private javax.swing.JTextField txtBrandName;
    private javax.swing.JTextField txtCondition;
    private javax.swing.JTextField txtCountry;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtWarranty;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
